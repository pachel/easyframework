<?php

namespace Pachel\EasyFrameWork\Cli;

use Pachel\EasyFrameWork\BaseAsArgument;

use Pachel\EasyFrameWork\Models\FieldList;

class CliScripts
{
    /**
     * @var BaseAsArgument $app
     */
    private $app;

    public function __construct($app)
    {
        $this->app = $app;
    }

    public function createModel()
    {
        $arguments = $this->app->env("SERVER.argv");
        if(empty($arguments[2])){
            echo "HIBA: A tábla nevét is át kell adni paraméternek";
            die(1);
        }
        $sql = "SHOW COLUMNS FROM `".$arguments[2]."`";
        /**
         * @var FieldList[] $fieldlist;
         */
        try {
            $fieldlist = $this->app->DB->query($sql)->array();
        }
        catch (\Exception $exception) {
            if (empty($fieldlist)) {
                echo "HIBA: A tábla nem lekérdezhető!\n";
                echo $exception->getMessage();
                die(1);
            }
        }
        $className = "generated_".$arguments[2]."Model";
        $primary = null;
        $class = "use  Pachel\\EasyFrameWork\\DB\\Models\\dataModel;\n";
        $class .= "/**\n * @generated by EasyFramework ".date("Y-m-d H:i:s")."\n * @author https://github.com/pachel\n**/\n";
        $class .= "class ".$className." extends dataModel{\n";
        $class .= "\t/**\n\t * @var string \$_tablename Az SQL tábla neve\n\t**/\n\tprotected string \$_tablename = \"".$arguments[2]."\";\n";
        $class .= "\t/**\n\t * @var array \$_not_visibles A SELECT lekérdezésben láthatatlan mezők nevei\n\t**/\n\tprotected array \$_not_visibles = [];\n";
   //     $class2 .= "\tprotected string \$_classname = ".$className."::class;\n";
        $class2 = "\t// Az adattábla mezői ".str_pad("",100,">")."\n";
        foreach ($fieldlist AS $field){
            if($field->Key == "PRI"){
                $primary = $field->Field;
            }
            $type = $this->getType($field->Type);
            if($field->Null == "NO"){
                $class2.="\t/**\n";
                //$class2.="\t * NOT NULL PARAMETER!!!!\n";
                if(!empty($field->Key))
                    $class2 .= "\t * key:     " . $field->Key . "\n";
                if(!empty($field->Default))
                    $class2 .= "\t * default: " . $field->Default . "\n";
                if(!empty($field->Extra))
                $class2.="\t * extra:   ".$field->Extra."\n";

                $class2.="\t * @var ".$type." \$".$field->Field." NOT NULL\n";
                $class2.="\t**/\n";
            }
            $class2.="\tpublic ".$type." \$".$field->Field.";\n";


        }
        $class.=(!empty($primary)?"\t/**\n\t * @var string \$_primary A(z) ".$arguments[2]." tábla elsődleges kulcsa az adatbázisban\n\t**/\n\tprotected string \$_primary = \"".$primary."\";\n":"").$class2;
        $class.="}";

        $file = $this->app->env("app.temp")."generated_".$arguments[2]."Model.php";
        if(!is_writable($this->app->env("app.temp"))){
            die(1);
        }
        file_put_contents($file,"<?php\n".$class);
        echo "A modell elkészült, itt találod: ".$file;
        /**
         * @var \generated_m_felhasznalokModel $test
         */


    }

    private function getType($type):string{
        $return = "string";
        preg_match("/([a-z]+)/",$type,$preg);
        if(preg_match("/int/",$preg[1])){
            $return = "int";
        }
        switch ($preg[1]){
            case "int": $return = "int";break;
            case "double": $return = "float";break;
            case "float": $return = "float";break;
        }


        return $return;
    }
}